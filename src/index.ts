import { parseDocument } from "htmlparser2";
import { findOne, innerText, isTag } from "domutils";
import murmurhash from "murmurhash";

// types not exported by htmlparser2, for whatever reason
type Document = ReturnType<typeof parseDocument>;
type ChildNode = Document["children"][number];

/**
 * Welcome to Cloudflare Workers! This is your first worker.
 *
 * - Run `wrangler dev src/index.ts` in your terminal to start a development server
 * - Open a browser tab at http://localhost:8787/ to see your worker in action
 * - Run `wrangler publish src/index.ts --name my-worker` to publish your worker
 *
 * Learn more at https://developers.cloudflare.com/workers/
 */

export interface Env {
  // Example binding to KV. Learn more at https://developers.cloudflare.com/workers/runtime-apis/kv/
  // MY_KV_NAMESPACE: KVNamespace;
  //
  // Example binding to Durable Object. Learn more at https://developers.cloudflare.com/workers/runtime-apis/durable-objects/
  // MY_DURABLE_OBJECT: DurableObjectNamespace;
  //
  // Example binding to R2. Learn more at https://developers.cloudflare.com/workers/runtime-apis/r2/
  // MY_BUCKET: R2Bucket;
}

const SCHEDULE_URL = "https://gamesdonequick.com/schedule";

export default {
  async fetch(
    request: Request,
    env: Env,
    ctx: ExecutionContext
  ): Promise<Response> {
    const responseLines = [
      "BEGIN:VCALENDAR",
      "PRODID:-//Kai Page//github.com/Quantaly/gdq-ical-cf-worker//EN",
      "VERSION:2.0",
    ];

    const document = parseDocument(await (await fetch(SCHEDULE_URL)).text());
    responseLines.push(...generateCalendar(document));

    responseLines.push("END:VCALENDAR");
    return new Response(responseLines.join("\r\n") + "\r\n", {
      headers: {
        "Content-Type": "text/calendar",
      },
    });
  },
};

const DURATION_REGEX = /(\d+):(\d+):(\d+)/;

function generateCalendar(document: Document): string[] {
  const lines: string[] = [];

  const h1 = findOne((e) => e.tagName === "h1", document.children);
  if (!h1) {
    console.error("did not find h1");
    return lines;
  }
  const eventName = innerText(h1);

  lines.push(`X-WR-CALNAME:${eventName}`);
  lines.push(`X-WR-CALDESC:Autogenerated from ${SCHEDULE_URL}`);

  const tbody = findOne((e) => e.tagName === "tbody", document.children);
  if (!tbody) {
    console.error("did not find tbody");
    return lines;
  }

  // edge cases that must be handled:
  // - no runner (Ninja Spirit @ SGDQ2019 - https://gamesdonequick.com/schedule/26)
  // - no duration (PreShow @ Frost Fatales 2022 - https://gamesdonequick.com/schedule/38)
  const tbodyElements = filterElements(tbody.children);
  for (let i = 0; i < tbodyElements.length; i += 2) {
    const firstRow = tbodyElements[i];
    const secondRow = tbodyElements[i + 1];
    const firstRowElements = filterElements(firstRow.children);
    const secondRowElements = filterElements(secondRow.children);

    const startTime = innerText(firstRowElements[0]).trim();
    const game = innerText(firstRowElements[1]).trim();
    const runners = innerText(firstRowElements[2]).trim();
    const duration =
      innerText(secondRowElements[0]).trim() ||
      innerText(firstRowElements[3]).trim() || // setup time
      "0:30:00"; // reasonable default so it at least shows up
    const category = innerText(secondRowElements[1]).trim();
    const host = innerText(secondRowElements[2]).trim();

    const startDate = new Date(startTime);
    const startTimestamp = rfc5545Timestamp(startDate);

    const durationMatches = DURATION_REGEX.exec(duration);
    if (!durationMatches) {
      console.error(`${game} had an unexpected duration format`);
      continue;
    }
    const durationHours = Number.parseInt(durationMatches[1]);
    const durationMinutes = Number.parseInt(durationMatches[2]);
    const durationSeconds = Number.parseInt(durationMatches[3]);
    const endDate = new Date(
      startDate.getTime() +
        ((durationHours * 60 + durationMinutes) * 60 + durationSeconds) * 1000
    );
    const endTimestamp = rfc5545Timestamp(endDate);

    const uid = murmurhash(eventName + game + category + runners);

    lines.push(
      "BEGIN:VEVENT",
      `UID:${uid}@gdq-schedule.quantaly.workers.dev`,
      `DTSTAMP:${startTimestamp}`,
      `DTSTART:${startTimestamp}`,
      `DTEND:${endTimestamp}`,
      `SUMMARY:${game}`,
      `DESCRIPTION:${category} by ${runners}\\nHosted by ${host}`,
      "END:VEVENT"
    );
  }

  return lines;
}

// return type is Element[], which cannot be named here without some fun manipulations
function filterElements(childNodes: ChildNode[]) {
  return childNodes.filter(isTag);
}

function leadingZeroes(n: number, length: number): string {
  return n.toString().padStart(length, "0");
}

function rfc5545Timestamp(date: Date): string {
  const year = leadingZeroes(date.getUTCFullYear(), 4);
  const month = leadingZeroes(date.getUTCMonth() + 1, 2);
  const day = leadingZeroes(date.getUTCDate(), 2);

  const hour = leadingZeroes(date.getUTCHours(), 2);
  const minute = leadingZeroes(date.getUTCMinutes(), 2);
  const second = leadingZeroes(date.getUTCSeconds(), 2);

  return `${year}${month}${day}T${hour}${minute}${second}Z`;
}
